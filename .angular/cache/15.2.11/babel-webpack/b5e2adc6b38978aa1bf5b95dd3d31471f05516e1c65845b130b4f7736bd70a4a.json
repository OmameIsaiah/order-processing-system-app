{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction OtpVerificationComponent_p_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Resend OTP in \", ctx_r0.timer, \" seconds\");\n  }\n}\nfunction OtpVerificationComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function OtpVerificationComponent_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onResendOtp());\n    });\n    i0.ɵɵtext(1, \"Resend OTP\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class OtpVerificationComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.otp = '';\n    this.timer = 60;\n    this.isResendDisabled = true;\n    const navigation = this.router.getCurrentNavigation();\n    const state = navigation?.extras.state;\n    this.email = state?.email || '';\n    this.startTimer();\n  }\n  onSubmit() {\n    this.authService.verifyOtp(this.email, this.otp).subscribe(response => {\n      console.log('OTP verification successful', response);\n      this.router.navigate(['/login']);\n    }, error => {\n      console.error('OTP verification failed', error);\n    });\n  }\n  onResendOtp() {\n    this.authService.resendOtp(this.email).subscribe(response => {\n      console.log('OTP resent successfully', response);\n      this.startTimer();\n    }, error => {\n      console.error('Failed to resend OTP', error);\n    });\n  }\n  startTimer() {\n    this.timer = 60;\n    this.isResendDisabled = true;\n    const interval = setInterval(() => {\n      this.timer--;\n      if (this.timer <= 0) {\n        clearInterval(interval);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n  static {\n    this.ɵfac = function OtpVerificationComponent_Factory(t) {\n      return new (t || OtpVerificationComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: OtpVerificationComponent,\n      selectors: [[\"app-otp-verification\"]],\n      decls: 16,\n      vars: 4,\n      consts: [[1, \"otp-container\"], [3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"otp\"], [\"type\", \"text\", \"id\", \"otp\", \"name\", \"otp\", \"maxlength\", \"4\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [4, \"ngIf\"], [3, \"click\", 4, \"ngIf\"], [3, \"click\"]],\n      template: function OtpVerificationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"OTP Verification\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"p\");\n          i0.ɵɵtext(4, \"We have sent a 4-digit OTP to your email: \");\n          i0.ɵɵelementStart(5, \"strong\");\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function OtpVerificationComponent_Template_form_ngSubmit_7_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 3);\n          i0.ɵɵtext(10, \"Enter OTP\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"input\", 4);\n          i0.ɵɵlistener(\"ngModelChange\", function OtpVerificationComponent_Template_input_ngModelChange_11_listener($event) {\n            return ctx.otp = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"button\", 5);\n          i0.ɵɵtext(13, \"Verify OTP\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(14, OtpVerificationComponent_p_14_Template, 2, 1, \"p\", 6);\n          i0.ɵɵtemplate(15, OtpVerificationComponent_button_15_Template, 2, 0, \"button\", 7);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate(ctx.email);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.otp);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.isResendDisabled);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isResendDisabled);\n        }\n      },\n      dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.MaxLengthValidator, i4.NgModel, i4.NgForm],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;;IAUIA,yBAA4B;IAAAA,YAAiC;IAAAA,iBAAI;;;;IAArCA,eAAiC;IAAjCA,iEAAiC;;;;;;IAC7DA,iCAA0D;IAAxBA;MAAAA;MAAA;MAAA,OAASA,mCAAa;IAAA,EAAC;IAACA,0BAAU;IAAAA,iBAAS;;;ACFjF,OAAM,MAAOC,wBAAwB;EAMnCC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;IAL5D,UAAK,GAAW,EAAE;IAClB,QAAG,GAAW,EAAE;IAChB,UAAK,GAAW,EAAE;IAClB,qBAAgB,GAAY,IAAI;IAG9B,MAAMC,UAAU,GAAG,IAAI,CAACD,MAAM,CAACE,oBAAoB,EAAE;IACrD,MAAMC,KAAK,GAAGF,UAAU,EAAEG,MAAM,CAACD,KAA0B;IAC3D,IAAI,CAACE,KAAK,GAAGF,KAAK,EAAEE,KAAK,IAAI,EAAE;IAC/B,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAC,QAAQ;IACN,IAAI,CAACR,WAAW,CAACS,SAAS,CAAC,IAAI,CAACH,KAAK,EAAE,IAAI,CAACI,GAAG,CAAC,CAACC,SAAS,CACvDC,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,QAAQ,CAAC;MACpD,IAAI,CAACX,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,EACAC,KAAK,IAAI;MACRH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CACF;EACH;EAEAC,WAAW;IACT,IAAI,CAACjB,WAAW,CAACkB,SAAS,CAAC,IAAI,CAACZ,KAAK,CAAC,CAACK,SAAS,CAC7CC,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;MAChD,IAAI,CAACL,UAAU,EAAE;IACnB,CAAC,EACAS,KAAK,IAAI;MACRH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAEAT,UAAU;IACR,IAAI,CAACY,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAK;MAChC,IAAI,CAACH,KAAK,EAAE;MACZ,IAAI,IAAI,CAACA,KAAK,IAAI,CAAC,EAAE;QACnBI,aAAa,CAACF,QAAQ,CAAC;QACvB,IAAI,CAACD,gBAAgB,GAAG,KAAK;;IAEjC,CAAC,EAAE,IAAI,CAAC;EACV;;;uBA/CWtB,wBAAwB;IAAA;EAAA;;;YAAxBA,wBAAwB;MAAA0B;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDTrC/B,8BAA2B;UACnBA,gCAAgB;UAAAA,iBAAK;UACzBA,yBAAG;UAAAA,0DAA0C;UAAAA,8BAAQ;UAAAA,YAAW;UAAAA,iBAAS;UACzEA,+BAA8B;UAAxBA;YAAA,OAAYgC,cAAU;UAAA,EAAC;UAC3BhC,8BAAwB;UACLA,0BAAS;UAAAA,iBAAQ;UAClCA,iCAAgF;UAApDA;YAAA;UAAA,EAAiB;UAA7CA,iBAAgF;UAElFA,kCAAsB;UAAAA,2BAAU;UAAAA,iBAAS;UAE3CA,uEAAiE;UACjEA,iFAA6E;UAC/EA,iBAAM;;;UAViDA,eAAW;UAAXA,+BAAW;UAIhCA,eAAiB;UAAjBA,iCAAiB;UAI7CA,eAAsB;UAAtBA,2CAAsB;UACjBA,eAAuB;UAAvBA,4CAAuB","names":["i0","OtpVerificationComponent","constructor","authService","router","navigation","getCurrentNavigation","state","extras","email","startTimer","onSubmit","verifyOtp","otp","subscribe","response","console","log","navigate","error","onResendOtp","resendOtp","timer","isResendDisabled","interval","setInterval","clearInterval","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Isaiah\\Business\\Neptune-Microfinance-Bank\\order-processing-system-app\\src\\app\\otp-verification\\otp-verification.component.html","C:\\Isaiah\\Business\\Neptune-Microfinance-Bank\\order-processing-system-app\\src\\app\\otp-verification\\otp-verification.component.ts"],"sourcesContent":["<div class=\"otp-container\">\n    <h2>OTP Verification</h2>\n    <p>We have sent a 4-digit OTP to your email: <strong>{{ email }}</strong></p>\n    <form (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label for=\"otp\">Enter OTP</label>\n        <input type=\"text\" id=\"otp\" [(ngModel)]=\"otp\" name=\"otp\" maxlength=\"4\" required>\n      </div>\n      <button type=\"submit\">Verify OTP</button>\n    </form>\n    <p *ngIf=\"isResendDisabled\">Resend OTP in {{ timer }} seconds</p>\n    <button *ngIf=\"!isResendDisabled\" (click)=\"onResendOtp()\">Resend OTP</button>\n  </div>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-otp-verification',\n  templateUrl: './otp-verification.component.html',\n  styleUrls: ['./otp-verification.component.css'],\n})\nexport class OtpVerificationComponent {\n  email: string = '';\n  otp: string = '';\n  timer: number = 60;\n  isResendDisabled: boolean = true;\n\n  constructor(private authService: AuthService, private router: Router) {\n    const navigation = this.router.getCurrentNavigation();\n    const state = navigation?.extras.state as { email: string };\n    this.email = state?.email || '';\n    this.startTimer();\n  }\n\n  onSubmit(): void {\n    this.authService.verifyOtp(this.email, this.otp).subscribe(\n      (response) => {\n        console.log('OTP verification successful', response);\n        this.router.navigate(['/login']);\n      },\n      (error) => {\n        console.error('OTP verification failed', error);\n      }\n    );\n  }\n\n  onResendOtp(): void {\n    this.authService.resendOtp(this.email).subscribe(\n      (response) => {\n        console.log('OTP resent successfully', response);\n        this.startTimer();\n      },\n      (error) => {\n        console.error('Failed to resend OTP', error);\n      }\n    );\n  }\n\n  startTimer(): void {\n    this.timer = 60;\n    this.isResendDisabled = true;\n    const interval = setInterval(() => {\n      this.timer--;\n      if (this.timer <= 0) {\n        clearInterval(interval);\n        this.isResendDisabled = false;\n      }\n    }, 1000);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}