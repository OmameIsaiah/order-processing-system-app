{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../../services/notification.service\";\nimport * as i3 from \"@angular/material/dialog\";\nexport class OrderProductModalComponent {\n  constructor(http, notificationService, dialogRef, data) {\n    this.http = http;\n    this.notificationService = notificationService;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.quantity = 1;\n  }\n  onOrder() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    const payload = {\n      productUuid: this.data.product.uuid,\n      quantity: this.quantity\n    };\n    this.http.post('http://localhost:2003/order-service/api/v1/order', payload, {\n      headers\n    }).subscribe(response => {\n      this.notificationService.showNotification('Order placed successfully', 'success');\n      this.dialogRef.close(true); // Close the modal and return true to indicate success\n    }, error => {\n      this.notificationService.showNotification(error.error.message || 'Failed to place order', 'error');\n    });\n  }\n  onCancel() {\n    this.dialogRef.close(false); // Close the modal without placing the order\n  }\n\n  static {\n    this.ɵfac = function OrderProductModalComponent_Factory(t) {\n      return new (t || OrderProductModalComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: OrderProductModalComponent,\n      selectors: [[\"app-order-product-modal\"]],\n      decls: 2,\n      vars: 0,\n      template: function OrderProductModalComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"order-product-modal works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAuBA,eAAe,QAAQ,0BAA0B;AACxE,SAAqBC,WAAW,QAAQ,sBAAsB;;;;;AAQ9D,OAAM,MAAOC,0BAA0B;EAGrCC,YACUC,IAAgB,EAChBC,mBAAwC,EACzCC,SAAmD,EAC1BC,IAAS;IAHjC,SAAI,GAAJH,IAAI;IACJ,wBAAmB,GAAnBC,mBAAmB;IACpB,cAAS,GAATC,SAAS;IACgB,SAAI,GAAJC,IAAI;IANtC,aAAQ,GAAW,CAAC;EAOjB;EAEHC,OAAO;IACL,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IAEzE,MAAMK,OAAO,GAAG;MACdC,WAAW,EAAE,IAAI,CAACR,IAAI,CAACS,OAAO,CAACC,IAAI;MACnCC,QAAQ,EAAE,IAAI,CAACA;KAChB;IAED,IAAI,CAACd,IAAI,CACNe,IAAI,CAAC,kDAAkD,EAAEL,OAAO,EAAE;MAAEF;IAAO,CAAE,CAAC,CAC9EQ,SAAS,CACPC,QAAa,IAAI;MAChB,IAAI,CAAChB,mBAAmB,CAACiB,gBAAgB,CAAC,2BAA2B,EAAE,SAAS,CAAC;MACjF,IAAI,CAAChB,SAAS,CAACiB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,EACAC,KAAK,IAAI;MACR,IAAI,CAACnB,mBAAmB,CAACiB,gBAAgB,CACvCE,KAAK,CAACA,KAAK,CAACC,OAAO,IAAI,uBAAuB,EAC9C,OAAO,CACR;IACH,CAAC,CACF;EACL;EAEAC,QAAQ;IACN,IAAI,CAACpB,SAAS,CAACiB,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/B;;;;uBArCWrB,0BAA0B,iJAO3BF,eAAe;IAAA;EAAA;;;YAPdE,0BAA0B;MAAAyB;MAAAC;MAAAC;MAAAC;QAAA;UCVvCC,yBAAG;UAAAA,0CAA0B;UAAAA,iBAAI","names":["MAT_DIALOG_DATA","HttpHeaders","OrderProductModalComponent","constructor","http","notificationService","dialogRef","data","onOrder","token","localStorage","getItem","headers","set","payload","productUuid","product","uuid","quantity","post","subscribe","response","showNotification","close","error","message","onCancel","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Isaiah\\Business\\Neptune-Microfinance-Bank\\order-processing-system-app\\src\\app\\components\\products\\order-product-modal\\order-product-modal.component.ts","C:\\Isaiah\\Business\\Neptune-Microfinance-Bank\\order-processing-system-app\\src\\app\\components\\products\\order-product-modal\\order-product-modal.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { NotificationService } from '../../../services/notification.service';\n\n@Component({\n  selector: 'app-order-product-modal',\n  templateUrl: './order-product-modal.component.html',\n  styleUrls: ['./order-product-modal.component.css'],\n})\nexport class OrderProductModalComponent {\n  quantity: number = 1;\n\n  constructor(\n    private http: HttpClient,\n    private notificationService: NotificationService,\n    public dialogRef: MatDialogRef<OrderProductModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {}\n\n  onOrder(): void {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n    const payload = {\n      productUuid: this.data.product.uuid,\n      quantity: this.quantity,\n    };\n\n    this.http\n      .post('http://localhost:2003/order-service/api/v1/order', payload, { headers })\n      .subscribe(\n        (response: any) => {\n          this.notificationService.showNotification('Order placed successfully', 'success');\n          this.dialogRef.close(true); // Close the modal and return true to indicate success\n        },\n        (error) => {\n          this.notificationService.showNotification(\n            error.error.message || 'Failed to place order',\n            'error'\n          );\n        }\n      );\n  }\n\n  onCancel(): void {\n    this.dialogRef.close(false); // Close the modal without placing the order\n  }\n}","<p>order-product-modal works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}