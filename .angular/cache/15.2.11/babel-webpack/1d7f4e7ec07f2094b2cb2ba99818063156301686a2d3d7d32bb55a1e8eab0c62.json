{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  constructor() {\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.notifications$ = this.notificationsSubject.asObservable();\n    this.currentId = 0;\n  }\n  showNotification(message, type) {\n    const notification = {\n      id: this.currentId++,\n      message,\n      type\n    };\n    // Add the new notification\n    this.notificationsSubject.next([...this.notificationsSubject.value, notification]);\n    // Automatically remove the notification after 10 seconds\n    setTimeout(() => {\n      this.removeNotification(notification.id);\n    }, 10000);\n  }\n  removeNotification(id) {\n    const updatedNotifications = this.notificationsSubject.value.filter(notification => notification.id !== id);\n    this.notificationsSubject.next(updatedNotifications);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAWtC,OAAM,MAAOC,mBAAmB;EAM9BC;IALQ,yBAAoB,GAAG,IAAIF,eAAe,CAAiB,EAAE,CAAC;IACtE,mBAAc,GAAG,IAAI,CAACG,oBAAoB,CAACC,YAAY,EAAE;IAEjD,cAAS,GAAG,CAAC;EAEN;EAEfC,gBAAgB,CAACC,OAAe,EAAEC,IAAyB;IACzD,MAAMC,YAAY,GAAiB;MACjCC,EAAE,EAAE,IAAI,CAACC,SAAS,EAAE;MACpBJ,OAAO;MACPC;KACD;IAED;IACA,IAAI,CAACJ,oBAAoB,CAACQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAACR,oBAAoB,CAACS,KAAK,EAAEJ,YAAY,CAAC,CAAC;IAElF;IACAK,UAAU,CAAC,MAAK;MACd,IAAI,CAACC,kBAAkB,CAACN,YAAY,CAACC,EAAE,CAAC;IAC1C,CAAC,EAAE,KAAK,CAAC;EACX;EAEAK,kBAAkB,CAACL,EAAU;IAC3B,MAAMM,oBAAoB,GAAG,IAAI,CAACZ,oBAAoB,CAACS,KAAK,CAACI,MAAM,CAChER,YAAY,IAAKA,YAAY,CAACC,EAAE,KAAKA,EAAE,CACzC;IACD,IAAI,CAACN,oBAAoB,CAACQ,IAAI,CAACI,oBAAoB,CAAC;EACtD;;;uBA7BWd,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAAgB,SAAnBhB,mBAAmB;MAAAiB,YAFlB;IAAM;EAAA","names":["BehaviorSubject","NotificationService","constructor","notificationsSubject","asObservable","showNotification","message","type","notification","id","currentId","next","value","setTimeout","removeNotification","updatedNotifications","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Isaiah\\Business\\Neptune-Microfinance-Bank\\order-processing-system-app\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Notification {\n  id: number;\n  message: string;\n  type: 'success' | 'error';\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\n  notifications$ = this.notificationsSubject.asObservable();\n\n  private currentId = 0;\n\n  constructor() {}\n\n  showNotification(message: string, type: 'success' | 'error') {\n    const notification: Notification = {\n      id: this.currentId++,\n      message,\n      type,\n    };\n\n    // Add the new notification\n    this.notificationsSubject.next([...this.notificationsSubject.value, notification]);\n\n    // Automatically remove the notification after 10 seconds\n    setTimeout(() => {\n      this.removeNotification(notification.id);\n    }, 10000);\n  }\n\n  removeNotification(id: number) {\n    const updatedNotifications = this.notificationsSubject.value.filter(\n      (notification) => notification.id !== id\n    );\n    this.notificationsSubject.next(updatedNotifications);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}