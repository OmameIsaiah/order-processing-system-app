{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./config.service\";\nimport * as i3 from \"./notification.service\";\nexport class AuthService {\n  //private baseUrl = 'http://localhost:2001/account-service/api/v1/users';\n  constructor(http, configService, notificationService) {\n    this.http = http;\n    this.configService = configService;\n    this.notificationService = notificationService;\n  }\n  handleError(error) {\n    // Display the error message from the backend\n    if (error.error && error.error.message) {\n      this.notificationService.showNotification(error.error.message, 'error');\n    } else {\n      // Fallback message if no specific error message is provided\n      this.notificationService.showNotification('Oops! Unable to process request at the moment, please try again.', 'error');\n    }\n    return throwError(error);\n  }\n  login(email, password) {\n    return this.http.post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/entrance/signin`, {\n      email,\n      password\n    }).pipe(catchError(error => this.handleError(error)));\n  }\n  signup(name, email, password, userType) {\n    return this.http.post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/onboarding/signup`, {\n      name,\n      email,\n      password,\n      userType\n    }).pipe(catchError(error => this.handleError(error)));\n  }\n  verifyOtp(email, otp) {\n    return this.http.post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/onboarding/verify/otp`, {\n      email,\n      otp\n    }).pipe(catchError(error => this.handleError(error)));\n  }\n  resendOtp(email) {\n    return this.http.post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/onboarding/send/otp`, {\n      email\n    }).pipe(catchError(error => this.handleError(error)));\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;;;;;AAOjC,OAAM,MAAOC,WAAW;EACtB;EAEAC,YACUC,IAAgB,EAChBC,aAA4B,EAC5BC,mBAAwC;IAFxC,SAAI,GAAJF,IAAI;IACJ,kBAAa,GAAbC,aAAa;IACb,wBAAmB,GAAnBC,mBAAmB;EACzB;EAEIC,WAAW,CAACC,KAAwB;IAC1C;IACA,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE;MACtC,IAAI,CAACH,mBAAmB,CAACI,gBAAgB,CAACF,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,OAAO,CAAC;KACxE,MAAM;MACL;MACA,IAAI,CAACH,mBAAmB,CAACI,gBAAgB,CAAC,kEAAkE,EAAE,OAAO,CAAC;;IAExH,OAAOT,UAAU,CAACO,KAAK,CAAC;EAC1B;EAEAG,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACT,IAAI,CACbU,IAAI,CAAC,GAAG,IAAI,CAACT,aAAa,CAACU,wBAAwB,kBAAkB,EAAE;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAC3FG,IAAI,CAAChB,UAAU,CAAEQ,KAAK,IAAK,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;EACzD;EAEAS,MAAM,CAACC,IAAY,EAAEN,KAAa,EAAEC,QAAgB,EAAEM,QAAgB;IACpE,OAAO,IAAI,CAACf,IAAI,CACbU,IAAI,CAAC,GAAG,IAAI,CAACT,aAAa,CAACU,wBAAwB,oBAAoB,EAAE;MAAEG,IAAI;MAAEN,KAAK;MAAEC,QAAQ;MAAEM;IAAQ,CAAE,CAAC,CAC7GH,IAAI,CAAChB,UAAU,CAAEQ,KAAK,IAAK,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;EACzD;EAEAY,SAAS,CAACR,KAAa,EAAES,GAAW;IAClC,OAAO,IAAI,CAACjB,IAAI,CACbU,IAAI,CAAC,GAAG,IAAI,CAACT,aAAa,CAACU,wBAAwB,wBAAwB,EAAE;MAAEH,KAAK;MAAES;IAAG,CAAE,CAAC,CAC5FL,IAAI,CAAChB,UAAU,CAAEQ,KAAK,IAAK,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;EACzD;EAEAc,SAAS,CAACV,KAAa;IACrB,OAAO,IAAI,CAACR,IAAI,CACbU,IAAI,CAAC,GAAG,IAAI,CAACT,aAAa,CAACU,wBAAwB,sBAAsB,EAAE;MAAEH;IAAK,CAAE,CAAC,CACrFI,IAAI,CAAChB,UAAU,CAAEQ,KAAK,IAAK,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;EACzD;;;uBA1CWN,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAqB,SAAXrB,WAAW;MAAAsB,YAFV;IAAM;EAAA","names":["catchError","throwError","AuthService","constructor","http","configService","notificationService","handleError","error","message","showNotification","login","email","password","post","ACCOUNT_SERVICE_BASE_URL","pipe","signup","name","userType","verifyOtp","otp","resendOtp","factory","providedIn"],"sourceRoot":"","sources":["C:\\Isaiah\\Business\\Neptune-Microfinance-Bank\\order-processing-system-app\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { NotificationService } from './notification.service';\nimport { ConfigService } from './config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  //private baseUrl = 'http://localhost:2001/account-service/api/v1/users';\n\n  constructor(\n    private http: HttpClient,\n    private configService: ConfigService,\n    private notificationService: NotificationService\n  ) { }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    // Display the error message from the backend\n    if (error.error && error.error.message) {\n      this.notificationService.showNotification(error.error.message, 'error');\n    } else {\n      // Fallback message if no specific error message is provided\n      this.notificationService.showNotification('Oops! Unable to process request at the moment, please try again.', 'error');\n    }\n    return throwError(error);\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http\n      .post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/entrance/signin`, { email, password })\n      .pipe(catchError((error) => this.handleError(error)));\n  }\n\n  signup(name: string, email: string, password: string, userType: string): Observable<any> {\n    return this.http\n      .post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/onboarding/signup`, { name, email, password, userType })\n      .pipe(catchError((error) => this.handleError(error)));\n  }\n\n  verifyOtp(email: string, otp: string): Observable<any> {\n    return this.http\n      .post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/onboarding/verify/otp`, { email, otp })\n      .pipe(catchError((error) => this.handleError(error)));\n  }\n\n  resendOtp(email: string): Observable<any> {\n    return this.http\n      .post(`${this.configService.ACCOUNT_SERVICE_BASE_URL}/onboarding/send/otp`, { email })\n      .pipe(catchError((error) => this.handleError(error)));\n  }\n  // login(email: string, password: string): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}/entrance/signin`, { email, password });\n  // }\n\n  // signup(name: string, email: string, password: string, userType: string): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}/onboarding/signup`, { name, email, password, userType });\n  // }\n\n  // verifyOtp(email: string, otp: string): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}/onboarding/verify/otp`, { email, otp });\n  // }\n\n  // resendOtp(email: string): Observable<any> {\n  //   return this.http.post(`${this.baseUrl}/onboarding/send/otp`, { email });\n  // }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}