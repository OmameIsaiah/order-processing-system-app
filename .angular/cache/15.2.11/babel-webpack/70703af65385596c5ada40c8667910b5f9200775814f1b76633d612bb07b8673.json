{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthInterceptor {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(request, next) {\n    const token = localStorage.getItem('token');\n    // Add the token to the request headers\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(error => {\n      if (error.status === 401) {\n        // Token is invalid or expired\n        localStorage.removeItem('token'); // Remove the invalid token\n        this.router.navigate(['/login']); // Redirect to the login page\n      }\n\n      return throwError(error);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;EAErCC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C;IACA,IAAIF,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;;IAGJ,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAACS,IAAI,CAC9Bd,UAAU,CAAEe,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB;QACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;MAEpC,OAAOnB,UAAU,CAACgB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;;;uBAzBWd,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAkB,SAAflB,eAAe;IAAA;EAAA","names":["throwError","catchError","AuthInterceptor","constructor","router","intercept","request","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle","pipe","error","status","removeItem","navigate","factory"],"sourceRoot":"","sources":["C:\\Isaiah\\Business\\Neptune-Microfinance-Bank\\order-processing-system-app\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = localStorage.getItem('token');\n\n    // Add the token to the request headers\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          // Token is invalid or expired\n          localStorage.removeItem('token'); // Remove the invalid token\n          this.router.navigate(['/login']); // Redirect to the login page\n        }\n        return throwError(error);\n      })\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}